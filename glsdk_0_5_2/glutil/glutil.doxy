/**
\defgroup module_glutil GL Util

The OpenGL Utility Library (GL Util) is a collection of miscellaneous tools for doing common tasks. This includes shader and program compilation, and so forth.

The GL Utility library is distributed under the <a href="http://www.opensource.org/licenses/MIT">MIT License</a>.

Most of these functions interact with OpenGL directly. Therefore, they require an active OpenGL context. They also use [GL Load](@ref module_glload) to use OpenGL, so that library must be properly initialized before calling most of these functions. Each of the groups of functions/classes below will state whether they need to have GL Load initialized.
**/

/**
\defgroup module_glutil_debug Debug Output

\brief Helper functions for tracking down and understanding OpenGL errors.

These functions help deal with errors in two ways. The glutil::RegisterDebugOutput function will automatically output all errors through the ARB/KHR_debug_output extension. They can be filed to standard out or standard error, as you see fit. This function requires that GL Load has been successfully initialized.

OpenGL errors come as error codes; simple numbers. If you need to understand the meaning of an OpenGL error message, these functions can convert them either into the standard OpenGL error enumerator or a text description of what that enumerator means.

This also includes functions for translating [framebuffer completeness failures](http://www.opengl.org/wiki/Framebuffer_Object#Framebuffer_Completeness) error codes into text.

None of the error translation functions need GL Load to have been initialized.

\ingroup module_glutil
**/

/**
\defgroup module_glutil_font Basic Font System

\brief Classes for basic font rendering.

This SDK module provides basic font rendering services. It is important to note that this is *basic* font rendering. This is not intended to be a serious font handling system. Therefore, you will notice that some of the amenities one might find in a more significant font system are not present.

The fonts themselves are hard-coded directly into the library. This means that the executable's size can be noticably bigger by including the font system (~500KB). However, if you never use the font system (ie: you never call glutil::GenerateFont), your executable size will be completely unaffected.

The font used here is called [Inconsolata](http://www.levien.com/type/myfonts/inconsolata.html), a free font available online. The font is a fixed-width font, which makes text layout much easier. It is used here as a raster font, with several pre-defined font sizes.

This system provides *limited* [Unicode](http://en.wikipedia.org/wiki/Unicode) support. Specifically, it accepts UTF-8-encoded text, but it *only* recognizes the first 256 Unicode codepoints. While this corresponds to [Latin-1](http://en.wikipedia.org/wiki/ISO/IEC_8859-1), it cannot actually take Latin-1 *encoded* strings; it only accepts the UTF-8 encoding. This limited Unicode support avoids complex text layout system, as well as minimizes the image storage size of the fonts.

A glutil::Font object can only be created by calling glutil::GenerateFont (which requires that [GL Load](@ref module_glload) has been successfully initialized). The Font class provides methods for getting size information about the font (since it is fixed-width, all of the characters have the same size characteristics). It also has a function that will layout a single string of text (horizontally), without line-breaks or anything of that nature.

More complex text layout, like paragraphs and line breaks, is beyond this system.

\ingroup module_glutil
**/

/**
\defgroup module_glutil_matrixstack Matrix Stack

\brief Class and utility classes for matrix stacks.

A common task in OpenGL programs is to have a stack of transforms. This is useful for hierarchial rendering and for traversing a scene graph. Indeed, OpenGL before 3.1's removal of old features had matrix stacks built in.

Since it is a very useful feature, the GL Util library provides the MatrixStack class. It also provides the PushStack class for RAII-style pushing and poping operations.

\ingroup module_glutil
**/

/**
\defgroup module_glutil_poles Mouse Poles

\brief Objects that allow mouse-based control over the position and orientation of objects and the camera.

A "Pole" is a class that allows mouse-based control over an object's orientation by clicking and dragging.

In order to be platform-agnostic, the Pole classes are not dependent on input from any one windowing system. Instead, they rely on external code to provide input. When the user clicks the mouse, external code must detect this for the current platform and translate it for the Pole class.

All Pole classes have 4 input functions: `MouseClick`, `MouseMove`, `MouseWheel`, and `CharPress`. The user should call these to provide input to the Poles.

MouseClick must be called when a mouse button is pressed or released; it should not be called when the button is merely held. It should also be given the modifier keys that are currenlty being held down at the time of the pressing/releasing.

MouseMove should be called anytime the mouse is moved, though they will usually only do something useful when the action button is down. MouseWheel should be called when the mouse wheel is touched. CharPress should be called when a keyboard character is entered. It should only be called for presses; releases are irrelevant.

When a Pole is created, it is given a specific mouse button to listen for and respond to. This is the button that the pole in question uses for all of its mouse-based controls. This feature allows you to, for example, use left-clicks to mean "move the camera" and right-clicks to mean "move the object".

\ingroup module_glutil
**/

/**
\defgroup module_glutil_program Program Compilation/Linking

\brief Helper functions and objects for shader and program compiling and linking.

\ref module_glload "GL Load" must have been successfully initialized for these functions to work.

\todo Add a function for program binary uploading.

\ingroup module_glutil
**/

/**
\defgroup module_glutil_wndpos Window Positioning

\brief Helper function for positioning a window, based on the desktop size and the window's size.

\note GLFW lacks the ability to get the window's actual size. The size you get back is always the size of the \em client area, not the whole window. As such, if you use this function to anchor the window to the right or bottom of the desktop, the window will be partially off-screen.

\ingroup module_glutil
**/


/**
\defgroup module_glutil_exceptions Utility Exceptions

\ingroup module_glutil
**/